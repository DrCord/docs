"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[86963],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>f});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,f=c["".concat(l,".").concat(g)]||c[g]||d[g]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},88154:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(58168),r=(n(96540),n(15680));const o={title:"Input and output state"},i=void 0,s={unversionedId:"jobs/state",id:"jobs/state",title:"Input and output state",description:"Each Job requires an input state and (in most cases) will produce an output",source:"@site/docs/jobs/state.md",sourceDirName:"jobs",slug:"/jobs/state",permalink:"/documentation/jobs/state",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/jobs/state.md",tags:[],version:"current",frontMatter:{title:"Input and output state"},sidebar:"docs",previous:{title:"Job Writing Guide",permalink:"/documentation/jobs/job-writing-guide"},next:{title:"Javascript Tips",permalink:"/documentation/jobs/javascript"}},l={},p=[{value:"State Keys",id:"state-keys",level:2},{value:"Input &amp; output state for runs",id:"input--output-state-for-runs",level:2},{value:"Webhook triggered runs",id:"webhook-triggered-runs",level:3},{value:"Kafka triggered runs",id:"kafka-triggered-runs",level:3},{value:"Cron triggered runs",id:"cron-triggered-runs",level:3},{value:"Input &amp; output state for steps",id:"input--output-state-for-steps",level:2},{value:"On success",id:"on-success",level:3},{value:"On failure",id:"on-failure",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...o}=e;return(0,r.yg)(c,(0,a.A)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Each Job requires an input state and (in most cases) will produce an output\nstate. This article explains these concepts in greater detail."),(0,r.yg)("p",null,"State is just a Javascript object. It is the means via which Jobs share\ninformation between each other. It also provides a common scope for Operations\nto read from and write to."),(0,r.yg)("p",null,"The final state form a Job must always be a serializable Javascript object (ie,\na JSON object). Any non-serializable keys will be removed."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Job State Overview",src:n(57276).A,width:"960",height:"540"})),(0,r.yg)("admonition",{title:"A note on terminology",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Input state is often referred to as ",(0,r.yg)("em",{parentName:"p"},"initial state"),", and output state is often\nreferred as ",(0,r.yg)("em",{parentName:"p"},"final state"),". These terms can safely be used interchangeably.")),(0,r.yg)("h2",{id:"state-keys"},"State Keys"),(0,r.yg)("p",null,"State objects tend to have the following keys:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"data"),": a temporary information store, usually used to save the result of\nparticular operation"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"configuration"),": an object containing credential data"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"references"),": a history of previous ",(0,r.yg)("inlineCode",{parentName:"li"},"data")," values"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"response"),": often used by adaptors (like http) to save the raw http response\nfrom a request"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"errors"),": a list of errors generated by a particular Workflow, indexed by Job\nname.")),(0,r.yg)("p",null,"At the end of a Job, the configuration key will be removed, along with any other\nnon serialisable keys."),(0,r.yg)("p",null,"Adaptors will occasionally write extra information to state during a run - for\nexample, database Adaptors tend to write a ",(0,r.yg)("inlineCode",{parentName:"p"},"client")," key to state, used to track\nthe database connection. These will eb removed at the end of a Job."),(0,r.yg)("h2",{id:"input--output-state-for-runs"},"Input & output state for runs"),(0,r.yg)("p",null,"Depending on whether you're running Workflows locally or on the app, the input\nstate for a Run can be generated differently:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"When creating a work order by hand, you must select or generate your input\nmanually (e.g., by creating a custom ",(0,r.yg)("inlineCode",{parentName:"li"},"Input")," on the app or ",(0,r.yg)("inlineCode",{parentName:"li"},"state.json")," file\nif working locally ",(0,r.yg)("a",{parentName:"li",href:"/documentation/cli"},"in the CLI"),")."),(0,r.yg)("li",{parentName:"ul"},"When a work order is automatically created via a webhook trigger or cron\ntrigger, state will be created as described below.")),(0,r.yg)("p",null,"The final state of a Run is determined by what's returned from the last\noperation. Remember that job expressions are a series of operations: they each\ntake state and return state, after creating any number of side effects. You can\ncontrol what is returned at the end of all of these operations."),(0,r.yg)("h3",{id:"webhook-triggered-runs"},"Webhook triggered runs"),(0,r.yg)("p",null,"On the platform, when a Run is triggered by a webhook event, the input state\ncontains important parts of the inbound ",(0,r.yg)("strong",{parentName:"p"},"http request"),"."),(0,r.yg)("p",null,"The input state will look something like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'{\n  data: { // the body of the http request\n    formId: "patient_enrollment",\n    name: "John Doe"\n  },\n  request: {\n    method: "POST",\n    path: [\'i\', \'your-webhook-url-uuid\'] // an ordered array with optional additional paths\n    headers: { "content-type": "application/json" }, // an object containing the headers of the request\n    query_params: {} // an object containig any query parameters\n  },\n}\n')),(0,r.yg)("h3",{id:"kafka-triggered-runs"},"Kafka triggered runs"),(0,r.yg)("p",null,"When a kafka message is received by the trigger, the input state contains\nimportant information for auditing or recovering from any loss of connection or\nfailure of the workorder."),(0,r.yg)("p",null,"The input state looks like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'{\n  data: { // the body of the kafka message request\n    body: {\n      formId: "patient_enrollment",\n      name: "John Doe"\n    },\n  headers: {\n      "X-Forwarded-For": "41.90.69.203",\n      "X-Forwarded-Host": "ec2-13-244-108-204.af-south-1.compute.amazonaws.com:5001",\n      "X-OpenHIM-ClientID": "test",\n      "X-OpenHIM-TransactionID": "66a1f1d4c81081a1e6809484",\n      "accept": "application/fhir+json",\n      "content-length": "20592",\n      "content-type": "application/fhir+json",\n      "user-agent": "k6/0.49.0 (https://k6.io/)"\n    },\n    method: "POST",\n    path: "/kafka",\n    pattern: "^/kafka$"\n  },\n  request: {\n    "headers": [],\n    "key": "", //optional and nullable\n    "offset": 168321,\n    "partition": 1,\n    "topic": "fhir-data-pipes",\n    "ts": 1721889238000\n  }\n}\n')),(0,r.yg)("h3",{id:"cron-triggered-runs"},"Cron triggered runs"),(0,r.yg)("p",null,"On the platform, when a Run is triggered by a cron job, the input state will the\nfinal output state of the ",(0,r.yg)("strong",{parentName:"p"},"last succesful run")," for this workflow. This allows\neach subsequent run to ",(0,r.yg)("em",{parentName:"p"},"know")," about previous runs\u2014i.e., you can pass information\nfrom one run to another even if they happen days apart."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"{\n  ...finalStateOfLastSuccessfulRun,\n}\n")),(0,r.yg)("p",null,"If this is the first time the workflow has run, the initial state will simply by\nan empty Javascript object: ",(0,r.yg)("inlineCode",{parentName:"p"},"{}")),(0,r.yg)("h2",{id:"input--output-state-for-steps"},"Input & output state for steps"),(0,r.yg)("p",null,"State is also passed between each step in a workflow. The output state of the\nprevious step is used as the input state for the next step."),(0,r.yg)("h3",{id:"on-success"},"On success"),(0,r.yg)("p",null,"When a job succeeds, its output state will be whatever is returned by the last\noperation."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"{\n  data: { patients: [] },\n  references: [1, 2, 3]\n}\n")),(0,r.yg)("h3",{id:"on-failure"},"On failure"),(0,r.yg)("p",null,"When a step in a workflow fails, the error will be added to an ",(0,r.yg)("inlineCode",{parentName:"p"},"errors")," object\non state, keyed by the ID of the job that failed."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"{\n  data: { patients: [] },\n  references: [1, 2, 3],\n  errors: {\n    jobId: { /* error details */ }\n  }\n}\n")),(0,r.yg)("p",null,"See the below diagram for a visual description of how state might be passed\nbetween Steps in a Workflow."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Passing State",src:n(19410).A,width:"960",height:"540"})))}d.isMDXComponent=!0},19410:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/passing-state-steps-17bc7cfe23cd67dd8cf13db396f77c9b.png"},57276:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/state-javascript-3f1f25457b3d41d55ff5192953265f65.png"}}]);